<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mango&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-03T10:39:22.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mango</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>运用泛型实现不重用的UITableView</title>
    <link href="http://yoursite.com/2016/12/03/%E8%BF%90%E7%94%A8%E6%B3%9B%E5%9E%8B%E5%AE%9E%E7%8E%B0%E4%B8%8D%E9%87%8D%E7%94%A8%E7%9A%84UITableView/"/>
    <id>http://yoursite.com/2016/12/03/运用泛型实现不重用的UITableView/</id>
    <published>2016-12-03T10:32:44.000Z</published>
    <updated>2016-12-03T10:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>tableView</strong>再常见不过了，现在的项目中基本上都会用到很多<strong>tableView</strong>。并且很多时候<strong>tableView</strong>上每一行的内容都不同。</p>
<p>如果你有这样的需求：</p>
<blockquote>
<p>一个展现用户信息的页面，有的<strong>cell</strong>最右侧是图片，有的<strong>cell</strong>最右侧显示的是文本（名字、手机号、性别、余额）</p>
</blockquote>
<p>Or:</p>
<blockquote>
<p>一个填写用户信息的列表，有各种各样的<strong>textField</strong></p>
</blockquote>
<a id="more"></a>
<p>上述的两种页面有两个共同的特点：</p>
<ul>
<li><p><strong>tableViewCell</strong>的数量有限，并且数量不大。不需要重用<strong>cell</strong>也能搞定。</p>
</li>
<li><p>比起写出多个<strong>cell</strong>子类去适应这些情况，不如把这些<strong>label</strong>或者<strong>textfield</strong>作为<strong>viewControler</strong>的熟悉，在<strong>tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</strong>代理方法中把这些特定控件加到<strong>cell</strong>上，修改或者获取这些控件时非常方便。</p>
</li>
</ul>
<p>然而这个时候<strong>tableView的cell</strong>重用机制就非常棘手：</p>
<ul>
<li><p>注册多种<strong>cell</strong>很麻烦，在这种情况下很多余。</p>
</li>
<li><p>很多人应该遇到过的情况，重用<strong>cell</strong>会让视图变得很混乱，一些图片或空间因为重用的出现在了不该出现的地方</p>
</li>
</ul>
<p>在<strong>storyBoard</strong>中可以设置<strong>static cell</strong>，来关闭重用。可是如果<strong>tableView</strong>是用代码建立的，就没有某个系统库的方法能够设置<strong>static cell</strong>。</p>
<p>于是在<strong>swift</strong>下我写了一个简单的<strong>extension</strong>可以实现关闭重用的效果。实现原理也非常简单，<strong>show code</strong>:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UITableView</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="comment">/*</span></div><div class="line">     弹出一个静态的cell，无须注册重用，例如:</div><div class="line">     let cell: GrayLineTableViewCell = tableView.mm_dequeueStaticCell(indexPath)</div><div class="line">     即可返回一个类型为GrayLineTableViewCell的对象</div><div class="line">     </div><div class="line">     - parameter indexPath: cell对应的indexPath</div><div class="line">     - returns: 该indexPath对应的cell</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mm_dequeueStaticCell</span>&lt;T: UITableViewCell&gt;<span class="params">(indexPath: NSIndexPath)</span></span> -&gt; <span class="type">T</span> &#123;</div><div class="line">        <span class="keyword">let</span> reuseIdentifier = <span class="string">"staticCellReuseIdentifier - <span class="subst">\(indexPath.description)</span>"</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> cell = <span class="keyword">self</span>.dequeueReusableCellWithIdentifier(reuseIdentifier) <span class="keyword">as</span>? <span class="type">T</span> &#123;</div><div class="line">            <span class="keyword">return</span> cell</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">let</span> cell = <span class="type">T</span>(style: .<span class="type">Default</span>, reuseIdentifier: reuseIdentifier)</div><div class="line">            <span class="keyword">return</span> cell</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>无须注册。</p>
<p>将<strong>cell</strong>直接声明为其需要的类型，改方法会自动返回这个类型的<strong>cell</strong>。</p>
<p>最后：</p>
<p>泛型函数的调用必须是以下写法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> cell: <span class="type">GrayLineTableViewCell</span> = tableView.mm_dequeueStaticCell(indexPath)</div><div class="line">```	</div><div class="line"></div><div class="line">如果写成：</div><div class="line"></div><div class="line">```swift	</div><div class="line"><span class="keyword">let</span> cell = tableView.mm_dequeueStaticCell&lt;<span class="type">GrayLineTableViewCell</span>&gt;(indexPath)</div></pre></td></tr></table></figure>
<p>将会报错，这种写法只适用于 泛型类型，不适用于 泛型函数</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;tableView&lt;/strong&gt;再常见不过了，现在的项目中基本上都会用到很多&lt;strong&gt;tableView&lt;/strong&gt;。并且很多时候&lt;strong&gt;tableView&lt;/strong&gt;上每一行的内容都不同。&lt;/p&gt;
&lt;p&gt;如果你有这样的需求：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个展现用户信息的页面，有的&lt;strong&gt;cell&lt;/strong&gt;最右侧是图片，有的&lt;strong&gt;cell&lt;/strong&gt;最右侧显示的是文本（名字、手机号、性别、余额）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个填写用户信息的列表，有各种各样的&lt;strong&gt;textField&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>用xcconfig文件配置iOSapp环境变量</title>
    <link href="http://yoursite.com/2016/12/03/app%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2016/12/03/app环境变量/</id>
    <published>2016-12-03T10:26:50.000Z</published>
    <updated>2016-12-03T15:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>app开发中通常都会涉及到多个环境，Debug、Release等。环境切换时可能就会涉及到服务器url的切换，或者一些第三方sdk的appid的切换。最初我是通过在代码中添加变量的方式来设置环境的：<a id="more"></a></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">let</span> isRelease = <span class="literal">true</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">let</span> serverURL = isRelease ? <span class="string">"prod server url"</span> : <span class="string">"dev server url"</span></div></pre></td></tr></table></figure>
<p>然而这样做的缺陷是，每一次要切换环境的时候都需要去更改这个变量，多次修改后还是会比较烦。并且通常开发中可能会有不止两个环境。所以，配置app环境变量能够更好的解决环境切换的问题。</p>
<p>配置app环境变量的方式有多种，我选择了一种我感觉比较直观的方式来配置——使用xcconfig文件。</p>
<p>##需求</p>
<p>Xcode默认会提供两种配置环境：Debug 和 Release，这两者的区别：</p>
<ul>
<li>Debug 会多一些调试信息（网上很多人说release，环境下不能断点之类的，自己测试后发现断点什么的和debug、release没有关系，后面会详细说）</li>
<li>Release 运行速度快很多，流畅。打的包大小可能要比debug小一些</li>
</ul>
<p>在我的开发中主要是会用到3种环境：</p>
<ul>
<li>测试服务器debug</li>
<li>偶尔会切换到正式服务器debug</li>
<li>上架（正式服务器，release）</li>
</ul>
<p>默认提供的两种还不太够用。。。</p>
<p>根据以上需求，操作步骤大致如下：</p>
<p>##1、添加Build Configuration</p>
<p>打开项目的workspace，进入xcode的主界面。</p>
<p>选中主要工程的project -&gt; info , 找到Configurations, 点击下方的“＋”</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-8d924a0586334e07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160813_4.png"></p>
<p>从图中可以看到两个已经添加好的Configuration: Debug 和 Release</p>
<p>选择“deplicate debug configuration”,添加一个新的configuration,命名为ReleaseTest:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-c306a5df02ee6cba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160814_5.png"></p>
<p>从图上可以看到，三个configuration都已经有了默认的configuration set(也就是xxconfig文件)。这是因为我的工程中已经包含了cocoapods。默认的configuration set是pods添加的。</p>
<p>这个时候新增加的build configuration并没有对应的pods的xcconfig，所以项目会报错。把新建的configuration 对应的set 设置为none</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-e32ba6ac74eb4627.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160814_6.png"></p>
<p>命令行运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p>完成之后如下图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-717b4fe3a5d646ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160814_9.png"></p>
<p>##2、新建并配置xcconfig文件</p>
<p>common + “n”, 选择 iOS -&gt; Other -&gt; Configuration settings file</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-78f2a366a661d6a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160814_7.png"></p>
<p>新建4个xxconfig文件，我采用一下命名：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-9389ce75443f0f53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160814_8.png"></p>
<p>其中：</p>
<p>CommonConfig.xcconfig 文件中放一些通用的配置，例如build version等</p>
<p>其他三个文件分别对应三个build configuration.</p>
<p>在CommonConfig中添加：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">BUILD_VERSION</span> = <span class="number">1.0</span>.<span class="number">0</span></div></pre></td></tr></table></figure>
<p>DebugConfig:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	导入公共 config</div><div class="line">*/</div><div class="line">#include <span class="string">"CommonConfig.xcconfig"</span></div><div class="line"><span class="comment">/*</span></div><div class="line">	导入pods 对应的 config</div><div class="line">*/</div><div class="line">#include <span class="string">"Pods/Target Support Files/Pods/Pods.debug.xcconfig"</span></div><div class="line"></div><div class="line"><span class="type">APP_DISPLAY_NAME</span> = 测试服</div><div class="line"><span class="type">CONFIG_FLAG</span> = <span class="type">DEBUG</span></div></pre></td></tr></table></figure>
<p>ReleaseConfig:    </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#include <span class="string">"CommonConfig.xcconfig"</span></div><div class="line">#include <span class="string">"Pods/Target Support Files/Pods/Pods.release.xcconfig"</span></div><div class="line"></div><div class="line"><span class="type">APP_DISPLAY_NAME</span> = 真名</div><div class="line"><span class="type">CONFIG_FLAG</span> = <span class="type">RELEASE</span></div></pre></td></tr></table></figure>
<p>ReleaseTestConfig:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#include <span class="string">"CommonConfig.xcconfig"</span></div><div class="line">#include <span class="string">"Pods/Target Support Files/Pods/Pods.releasetest.xcconfig"</span></div><div class="line">	</div><div class="line"><span class="type">APP_DISPLAY_NAME</span> = 正式服</div><div class="line"><span class="type">CONFIG_FLAG</span> = <span class="type">RELEASE_TEST</span></div></pre></td></tr></table></figure>
<p>其中：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#include <span class="string">"Pods/Target Support Files/Pods/Pods.releasetest.xcconfig"</span></div><div class="line">```	</div><div class="line"></div><div class="line">可能会因为项目名称的不同导致路径不同，如果不太确定的可以再次pod install。pods会给出提示，其中包含了正确的路径。	</div><div class="line">```bash</div><div class="line">&gt;[!] <span class="type">CocoaPods</span> did not <span class="keyword">set</span> the base configuration of your project because your project already has a custom config <span class="keyword">set</span>. <span class="type">In</span> order <span class="keyword">for</span> <span class="type">CocoaPods</span> integration to work at all, please either <span class="keyword">set</span> the base configurations of the target `configTest` to `<span class="type">Pods</span>/<span class="type">Target</span> <span class="type">Support</span> <span class="type">Files</span>/<span class="type">Pods</span>/<span class="type">Pods</span>.debug.xcconfig` or include the `<span class="type">Pods</span>/<span class="type">Target</span> <span class="type">Support</span> <span class="type">Files</span>/<span class="type">Pods</span>/<span class="type">Pods</span>.debug.xcconfig` <span class="keyword">in</span> your build configuration.</div></pre></td></tr></table></figure>
<p>完成以上后，把build configuration切换成对应的新建的文件：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-f1a525371228d3c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160814_10.png"></p>
<p>##2、设置环境变量</p>
<p>完成上面的步骤就已经添加好了环境，剩下的就是设置环境变量</p>
<p>在Info.plist文件中，设置Bundle name 为 </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&#123;<span class="type">APP_DISPLAY_NAME</span>&#125;</div></pre></td></tr></table></figure>
<p>应用的名称就会根据配置改变了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-de1d8d6dac8fe640.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160814_11.png"></p>
<p>然而在代码中需要根据环境改变某些变量的值怎么办呢？</p>
<p>###1、设置预编译头参数</p>
<p>####OC</p>
<p>Project -&gt; Build settings -&gt; Apple LLVM 7.1 - Preprocessing</p>
<p>在 preprocessor 中添加</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&#123;<span class="type">CONFIG_FLAG</span>&#125;=<span class="number">1</span></div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-f4f2cdbc0fc7d379.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160814_12.png"></p>
<p>####Swift</p>
<p>Project -&gt; Build settings -&gt; Swift Compiler - Custom Flags</p>
<p>在 other swift flags 中添加</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">－<span class="type">D</span> $&#123;<span class="type">CONFIG_FLAG</span>&#125;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-3b518f9014a62ce5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160814_21.png"></p>
<p>####然后    </p>
<p>代码中：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">AppConfigType</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> <span class="type">Debug</span></div><div class="line">        <span class="keyword">case</span> <span class="type">Release</span></div><div class="line">        <span class="keyword">case</span> <span class="type">ReleaseTest</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> currentConfig: <span class="type">AppConfigType</span> &#123;</div><div class="line">        #<span class="keyword">if</span> <span class="type">DEBUG</span> = <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> .<span class="type">Debug</span></div><div class="line">        #elseif <span class="type">RELEASE_TEST</span> = <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> .<span class="type">ReleaseTest</span></div><div class="line">        #<span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> .<span class="type">Release</span></div><div class="line">        #endif</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> webServerURL: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">switch</span> currentConfig &#123;</div><div class="line">        <span class="keyword">case</span> .<span class="type">Debug</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">"test url"</span></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">"release url"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他变量也可以采用以上方式配置。</p>
<p>###添加多个scheme,方便配置切换</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-51d9d056d783628d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160814_14.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-785b380092076a20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160814_18.png"></p>
<p>在scheme中改变build configuration即可实现不同的环境切换，也可以添加多个scheme实现更方便的切换</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-4fa370bb13cef1fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160814_19.png"><br><img src="http://upload-images.jianshu.io/upload_images/1748971-4b165b90ff55f1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160814_20.png"></p>
<p><strong>添加的新scheme需要在manage scheme中勾选shared，git上的其他人才能看到新scheme</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-b97ffc642c9a2b15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160814_22.png"></p>
<p>###DEMO及推荐  </p>
<p><a href="https://github.com/MangoMade/XCConfigTestDemo" target="_blank" rel="external">XCConfig Demo</a></p>
<p><a href="http://www.jianshu.com/p/83b6e781eb51" target="_blank" rel="external">手把手教你给一个iOS app配置多个环境变量</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;app开发中通常都会涉及到多个环境，Debug、Release等。环境切换时可能就会涉及到服务器url的切换，或者一些第三方sdk的appid的切换。最初我是通过在代码中添加变量的方式来设置环境的：
    
    </summary>
    
    
      <category term="11" scheme="http://yoursite.com/tags/11/"/>
    
      <category term="112" scheme="http://yoursite.com/tags/112/"/>
    
      <category term="113" scheme="http://yoursite.com/tags/113/"/>
    
  </entry>
  
  <entry>
    <title>随意修改NavigationBar颜色、附带全屏手势的NavigationController</title>
    <link href="http://yoursite.com/2016/12/03/MMNavigationBar/"/>
    <id>http://yoursite.com/2016/12/03/MMNavigationBar/</id>
    <published>2016-12-03T09:16:41.000Z</published>
    <updated>2016-12-03T15:48:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个非常方便易用的NavigationController，使用系统的导航栏，并且能够像设置ViewController的属性一样来设置：颜色、隐藏、手势 等属性。</p>
<p>非常适合不同页面 导航栏颜色不同的需求。</p>
<a id="more"></a>
<p><a href="https://github.com/MangoMade/MMNavigationController" target="_blank" rel="external">GitHub: MMNavigationController</a></p>
<p>效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1748971-2d8a75c1236529e1.gif?imageMogr2/auto-orient/strip" alt="2016-11-12 16_52_24.gif"></p>
<p>##解决的问题</p>
<p>由于<code>NavigationBar</code>的生命周期是与<code>UINavigationController</code>绑定的，所以<code>UINavigationController</code>的所有子<code>ViewController</code>都共用同一个<code>NavigationBar</code>,但是在实际开发的需求中，常常会有某个视图的导航栏颜色与其它视图的导航栏颜色不同。</p>
<p>修改某一个<code>viewController</code>的颜色也不难：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(animated: Bool)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewWillAppear(animated)</div><div class="line">    navigationController?.navigationBar.barTintColor = <span class="type">UIColor</span>.blueColor()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(animated: Bool)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewWillDisappear(animated)</div><div class="line">    navigationController?.navigationBar.barTintColor = <span class="type">UIColor</span>.whiteColor()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只是每次需要这么多代码来解决一个看似很简单的问题，非常麻烦</p>
<p><strong>使用MMNavigationController后只需要一句代码，即可修改导航栏颜色：</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mm_navigationBarBackgroundColor = <span class="type">UIColor</span>.blueColor()</div></pre></td></tr></table></figure>
<p><strong>并且支持全屏Pop手势</strong></p>
<p>##使用</p>
<p><strong>由于<code>Swift</code>不能重写<code>load</code>方法，所以需要在AppDelegate中调用<code>UIViewController.mm_load()</code><br>然后用<code>MMNavigationController</code>代替<code>UINavigationController</code></strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">/** 高亮 **/</span></div><div class="line">    <span class="type">UIViewController</span>.mm_load()</div><div class="line">    <span class="keyword">let</span> rootViewController = <span class="type">MMNavigationController</span>(rootViewController: <span class="type">NormalViewController</span>())</div><div class="line">    <span class="comment">/** 高亮 **/</span></div><div class="line">    </div><div class="line">    rootViewController.hideBottomLine()</div><div class="line">    window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.mainScreen().bounds)</div><div class="line">    window?.rootViewController = rootViewController</div><div class="line">    window?.makeKeyAndVisible()</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后就可以在<code>ViewController</code>的<code>viewDidLoad</code>中设置如下属性了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">	 <span class="comment">/// 修改当前ViewContoller的导航栏的背景颜色</span></div><div class="line">    mm_navigationBarBackgroundColor = <span class="type">UIColor</span>.randomColor()</div><div class="line">    </div><div class="line">    <span class="comment">/// 修改当前ViewContoller标题颜色</span></div><div class="line">    mm_navigationBarTitleColor = <span class="type">UIColor</span>.whiteColor()</div><div class="line">    </div><div class="line">    <span class="comment">/// 隐藏当前ViewContoller的导航栏</span></div><div class="line">	 mm_navigationBarHidden = <span class="literal">true</span></div><div class="line">	 </div><div class="line">	 </div><div class="line">	 <span class="comment">/** 全屏手势相关属性 **/</span></div><div class="line">	 </div><div class="line">	 <span class="comment">/// pop 手势是否可用</span></div><div class="line">	 mm_popGestrueEnable = <span class="literal">false</span></div><div class="line">	 </div><div class="line">	 <span class="comment">/// pop 手势响应的范围</span></div><div class="line">	 mm_popGestrueEnableWidth = <span class="number">150</span></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单易用！</p>
<p>##实现</p>
<p>主要实现是参考了<a href="https://github.com/forkingdog/FDFullscreenPopGesture" target="_blank" rel="external">FDFullscreenPopGesture</a></p>
<p>运用AOP, 在<code>viewWillAppear</code>中进行属性的设置。</p>
<p>##Cocoapods</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'MMNavigationController'</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个非常方便易用的NavigationController，使用系统的导航栏，并且能够像设置ViewController的属性一样来设置：颜色、隐藏、手势 等属性。&lt;/p&gt;
&lt;p&gt;非常适合不同页面 导航栏颜色不同的需求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
</feed>
